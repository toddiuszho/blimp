#!/usr/bin/env bash
export BLIMP_VERSION='0.0.1'

#
# Freshen global platforms
# Freshen global envs
# Freshen global platform-envs
# Load local platforms
# Load local envs
# Load local platform-envs
# blimp-lock.sh
#

declare \
  BLIMP_CONTEXT_DIR='./gondola' \
  BLIMP_DEFAULT_HOSTNAME='github.com' \
  BLIMP_DEFAULT_FETCH_PROTOCOL='https' \
  COL_BLUE="\033[34m" \
  COL_CLEAR="\033[0m" \
  COL_CYAN="\033[36m" \
  COL_GREEN="\033[32m" \
  COL_MAGENTA="\033[35m" \
  COL_RED="\033[31m" \
  COL_YELLOW="\033[33m"

declare -i \
  LOG_LEVEL_FATAL=0 \
  LOG_LEVEL_ERROR=10 \
  LOG_LEVEL_WARN=100 \
  LOG_LEVEL_INFO=1000 \
  LOG_LEVEL_DEBUG=10000 \
  LOG_LEVEL_TRACE=100000

declare -i LOG_LEVEL=$LOG_LEVEL_DEBUG

declare -A bin_dependencies=([curl]='Web CLI' [git]='Git SCM CLI' [jq]='JSON manipulation')
# TODO verify bin dependencies present

# TODO: move these to global/local cfg
declare -A host_organization_aliases=(
  [@e11]='e11.github.com'
  [@i2]='i2.github.com'
)
declare -A host_organization_remaps=(
  [github.com/6FTS]='@e11'
  [github.com/CNect]='@e11'
  [github.com/ConcentricCompliance]='@e11'
  [github.com/e11automaton]='@e11'
  [github.com/e11community]='@e11'
  [github.com/e11sandbox]='@e11'
  [github.com/enginnering11]='@e11'
  [github.com/intriguefortwo]='@i2'
)

log-error() {
  [ $LOG_LEVEL -ge $LOG_LEVEL_ERROR ] && echo -e "[${COL_RED}ERROR${COL_CLEAR}] $*" >&2
}

log-is-info-enabled() {
  [ $LOG_LEVEL -ge $LOG_LEVEL_INFO ]
}

log-info() {
  [ $LOG_LEVEL -ge $LOG_LEVEL_INFO ] && echo -e "[${COL_MAGENTA}INFO${COL_CLEAR}] $*" >&2
}

log-is-debug-enabled() {
  [ $LOG_LEVEL -ge $LOG_LEVEL_DEBUG ]
}

log-debug() {
  [ $LOG_LEVEL -ge $LOG_LEVEL_DEBUG ] && echo -e "[${COL_BLUE}DEBUG${COL_CLEAR}] $*" >&2
}

log-warn() {
  [ $LOG_LEVEL -ge $LOG_LEVEL_WARN ] && echo -e "[${COL_YELLOW}WARN${COL_CLEAR}] $*" >&2
}

blimp-colors() {
  if [ "${TERM:0:5}" != 'xterm' ]; then
    COL_BLUE=''
    COL_CLEAR=''
    COL_CYAN=''
    COL_GREEN=''
    COL_MAGENTA=''
    COL_RED=''
    COL_YELLOW=''
  fi
}

blimp-find-context-dir() {
  local search_path='.'
  for i in $(seq 1 1024); do
    if [ -d "${search_path}/gondola" ]; then
      BLIMP_CONTEXT_DIR='./gondola'
      return 0
    fi

    if [ -d "${search_path}/.git" ]; then
      log-error "No blimp context directory can be found!"
      return 1
    fi

    search_path="${search_path}/.."
    if ! [ -d "${search_path}" ]; then
      log-error "No blimp context directory can be found!"
      return 1
    fi
  done
}

blimp-init() {
  # ! [ -f ./blimp ] && \
  #   curl -qsLk4 -o './blimp' --url "https://github.com/toddiuszho/blimp/releases/stable/blimp" && \
  #   chmod +x ./blimp
  ! [ -f ./blimp ] && \cp "$0" ./
  ! [ -d ./gondola ] && mkdir -p ./gondola
  declare -a subs=(lib platform env platform-env scratch local-platform local-env local-platform-env)
  for sub in "${subs[@]}"; do
    ! [ -d "./gondola/${sub}" ] && mkdir -p "./gondola/${sub}"
  done
  return 0
}

blimp-populate-collection() {
  local collection_name="${1}"
  local git_resource_path="${2}"
}

blimp-import-usage() {
  echo 'Usage:' >&2
  echo '  blimp import [HOST='github.com'/]ORG/REPO [--branch=BRANCH] [--commit=COMMIT] [--clone-debug] [--clone-verbose] [--release=RELEASE]' >&2
  echo '' >&2
  echo 'Examples:' >&2
  echo '  blimp import acme/tools' >&2
  echo '  blimp import gitlab.com/techware/finder' >&2
  echo '  blimp import exemplars/geospatial --release=v1.9' >&2
}

lopt-error-no-value-no-default() {
  local context="${1}"
  local lopt_key="${2}"
  log-error "Command [${context}] tried to use [--${lopt_name}] option without any specified value or set default!"
}

is-true() {
  [ "$1" = 'yes' ] || [ "$1" = 'true' ] || [ "$1" = 'on' ]
}

blimp-import() {
  declare -i do_clone=1 do_release=0
  declare -a pos_args=()
  declare -a lopt_seen=()
  declare -A lopt_defaults=(
    ['branch']=''
    ['clone-debug']='true'
    ['clone-verbose']='true'
    ['commit']=''
    ['decompress']='true'
    ['release']=''
  )
  if log-is-debug-enabled; then
    for key in "${!lopt_defaults[@]}"; do
      log-debug "k=[$key] v=[${lopt_defaults[$key]}]"
    done
  fi

  for arg in "$@"; do
    if [ "${arg:0:2}" = '--' ]; then
      local dashless="${arg#--}"
      local lopt_name="${dashless%%=*}"
      local lopt_value="${dashless#*=}"
      log-debug "d=[${dashless}] n=[${lopt_name}] v=[${lopt_value}]"
      if [ "${lopt_value}" = "${dashless}" ]; then
        local lopt_default_lookup="${lopt_defaults[$lopt_name]}"
        log-debug "l=[${lopt_default_lookup}]"
        if [ -n "${lopt_default_lookup}" ]; then
          lopt_value="${lopt_default_lookup}"
        else
          lopt-error-no-value-no-default 'blimp import' "${lopt_name}"
          return 1
        fi
      fi
      lopt_seen+=("${lopt_name}")
      local lopt_key="${lopt_name//-/_}"
      log-debug "Adding [--${lopt_name}]=[${lopt_value}] to [blimp_import_${lopt_key}]"
      eval "blimp_import_${lopt_key}=\"${lopt_value}\""
      local peek="blimp_import_${lopt_key}"
      log-debug "Testing lopt [${lopt_name}] = [${!peek}]"
    else
      pos_args+=("${arg}")
    fi
  done

  local import_path="${pos_args[0]}"
 
  if [ -z "${import_path}" ]; then
    log-error "Empty import path"
    blimp-import-usage
    return 1
  fi
 
  local import_project="${import_path##*/}"
 
  if [ "${import_project}" = "${import_path}" ]; then
    log-error "No discernible organization from [${import_path}]"
    blimp-import-usage
    return 1
  fi

  declare -a clone_options=()
  declare -i validation_problems=0

  if [ -n "${blimp_import_release}" ]; then
    do_release=0
    if [ -n "${blimp_import_branch}" ]; then
      log-error "Cannot use [--branch] option while using [--release] option!"
      validation_problems=$(( $validation_problems + 1 ))
    fi
    if [ -n "${blimp_import_commit}" ]; then
      log-error "Cannot use [--commit] option while using [--release] option!"
      validation_problems=$(( $validation_problems + 1 ))
    fi
  fi
  if [ -n "${blimp_import_commit}" ]; then
    do_clone=0
    do_release=1
  else
    clone_options+=('--depth=1')
  fi
  if [ -n "${blimp_import_branch}" ]; then
    do_clone=0
    do_release=1
    clone_options+=("--branch=${blimp_import_branch}")
  fi
  if ! is-true "${blimp_import_clone_verbose}"; then
    clone_options+=('--quiet')
  fi

  if [ $validation_problems -gt 0 ]; then
    exit $validation_problems
  fi
 
  local import_host_org="${import_path%/*}"
  local import_host="${import_host_org%/*}"
  local import_org="${import_host_org#*/}"
  if [ "${import_host}" = "${import_host_org}" ]; then
    import_host="${BLIMP_DEFAULT_HOSTNAME}"
    import_host_org="${BLIMP_DEFAULT_HOSTNAME}/${import_org}"
  fi
  
  local remap="${!host_organization_remaps[$import_host_org]}"
  if [ -n "${remap}" ]; then
    log-info "Remapping [${import_host_org}] to [${remap}]"
    if [ '@' = "${remap:0:1}" ]; then
      old_remap="${remap}"
      remap="${!host_organization_aliases[$old_remap]}"
      if [ -z "${remap}" ]; then
        log-error "Remap alias [${old_remap}] could not be found!"
      else
        log-info "Remapping [${import_host_org}] to [${remap}/${import_project}] via alias [${old_remap}]"
        import_host="${remap}"
      fi
    else
      import_host="${remap}"
    fi
  fi
 
  local import_resolved_path="${import_host}/${import_org}/${import_project}"
  local scratch_dir="${BLIMP_CONTEXT_DIR}/scratch/lib/${import_resolved_path}"
  [ -n "${scratch_dir}" ] && [ "${scratch_dir}" != '/' ] && rm -rf "${scratch_dir}"
  mkdir -p "${scratch_dir}"

  # GH release secret sauce: curl -sLH 'Accept: application/vnd.github.v3+json' "https://api.github.com/repos/${ORG}/${REPO}/releases/tags/${VERSION}" | jq -Mr '.assets[] | .browser_download_url' | xargs -L1 -I{} curl -LJOs --url {}
  # instead of "tags/${VERSION}" can do just 'latest'
  if [ $do_release -eq 0 ]; then
    [ 0 -eq 0 ]
    if [ $? -ne 0 ]; then
      if [ -z "${blimp_import_release}" ]; then
        log-info "No latest release. Let's try latest from default branch."
        do_clone=0
      fi
    fi
  fi

  if [ $do_clone -eq 0 ]; then
    log-debug "gco=[${clone_options[@]}]"
    git clone \
      "${clone_options[@]}" \
      "https://${import_resolved_path}.git" \
      "${scratch_dir}"
    if [ $? -ne 0 ]; then
      log-error "Could not clone [${import_resolved_path}]"
      return 1
    fi
    if is-true "${blimp_import_commit}"; then
      git checkout "${blimp_import_commit}"
      if [ $? -ne 0 ]; then
        log-error "Could not switch to commit [${blimp_import_commit}]"
      return 1
    fi
    fi
    if ! is-true "${blimp_import_clone_debug}"; then
      if [ -d "${scratch_dir}/.git" ]; then
        rm -rf "${scratch_dir}/.git"
      fi
      if [ -f "${scratch_dir}/.gitignore" ]; then
        rm -rf "${scratch_dir}/.gitignore"
      fi
    fi
  fi

  local import_version='0.0.0'
  if [ -n "${blimp_import_release}" ]; then
    import_version="${blimp_import_release}"
  elif [ -n "${blimp_import_commit}" ]; then
    import_version="${blimp_import_commit}"
  elif [ -n "${blimp_import_branch}" ]; then
    import_version="${blimp_import_branch}"
  else
    # TODO: how does latest release determine ver? latest pull default branch determine ver?
    import_version="needs_to_be_calculated"
  fi
 
  local import_dir="${BLIMP_CONTEXT_DIR}/lib/${import_resolved_path}/${import_version}"
  if ! [ -e "${import_dir}" ]; then
    mkdir -p "${import_dir}"
    cp -R "${scratch_dir}/" "${import_dir}/"
    local package_file="${import_dir}/package.sh"
    if [ -f "${package_file}" ]; then
      # TODO chroot
      . "${package_file}"
    else
      log-warn "No package file to import for ${import_resolved_path}"
    fi
  fi
 
  return 0
}

blimp-version() {
  echo "${BLIMP_VERSION}"
}

blimp-help() {
  echo '[[ Bash Package Manager ]]'
  echo ''
  echo "Usage: blimp COMMAND [ARGS...]"
  echo ''
  echo 'Commands:'
  echo '  help              help instructions for using blimp'
  echo '  import GIT_PATH   import a bash package from host/org/repo'
  echo '  init              initialize CWD for blimp use'
  echo '  version           print version of blimp'
}

blimp-start() {
  blimp-colors
  blimp-find-context-dir
}

if [ "${1}" = 'init' ]; then
  blimp-init
  exit $?
fi

blimp-start
if [ $? -ne 0 ]; then
  exit 1
fi

if [ "${1}" = 'help' ]; then
  blimp-help "$@"
  exit $?
elif [ "${1}" = 'import' ]; then
  shift 1
  blimp-import "$@"
  exit $?
elif [ "${1}" = 'version' ]; then
  blimp-version
  exit 0
else
  log-error "Unknown command [${1}]"
fi
